<?xml version="1.0" encoding="utf-8"?>
<project name="SharpFlame" xmlns="http://nant.sf.net/release/0.92/nant.xsd" >
     <!-- _________________________________________________________________ -->
     <!-- _________________________________________________________________ -->
     <!--                          BUILD VARIABLES                          -->
     <!-- _________________________________________________________________ -->
     <!-- _________________________________________________________________ -->
    <fail message="ERROR: 'platform' (linux | win | osx) property must be specified." unless="${property::exists('platform')}" />
    <echo message="BUILD PLATFORM: ${platform}"/>

    <property name="win" value="${platform == 'win'}"/>
    <property name="osx" value="${platform == 'osx'}"/>
    <property name="linux" value="${platform == 'linux'}"/>


    <!-- Global Project Variables -->
    <property name="build.label" value="0.24" />
    <property name="build.label" value ="${build.label}.${build.number}" if ="${property::exists('build.number')}" />
    <property name="build.label" value ="${build.label}.11111.11111" unless="${property::exists('build.number')}" />

    <property name="build.base" value="${path::get-full-path('__COMPILE_OUTPUT')}" />
    <property name="build.dir"  value="${path::combine(build.base, 'SharpFlame.Windows')}" if="${win}" />
    <property name="build.dir"  value="${path::combine(build.base, 'SharpFlame.Osx')}" if="${osx}" />
    <property name="build.dir"  value="${path::combine(build.base, 'SharpFlame.Linux')}" if="${linux}" />
    

    <target name="build-win" if="${win}" description="Main Build Script for Windows OS">
        <call target="set-dev-env"/>
        <call target="gen-asminfo" />

        <msbuild project="SharpFlame.Gui.Windows\SharpFlame.Gui.Windows.csproj" target="Rebuild" >
            <!--<arg value ="/verbosity:diag" />-->
            <property name="Configuration" value="Release"/>
            <property name="VisualStudioVersion" value="11.0"/>
            <property name="EnablePackageProcessLoggingAndAssert" value="false" />
        </msbuild>

        <property name="il.input.dir" value="SharpFlame.Gui.Windows\bin\Release" />
        <property name="il.input.exe" value="SharpFlame.Gui.Windows.exe"/>
        <property name="il.output.dir" value="${build.dir}"/>
        <call target="il-repack" />
    </target>

    <target name="build-linux" if="${linux}" description="Main Build Script for Linux">
        <call target="set-dev-env"/>
        <call target="gen-asminfo" />

        <exec program="xbuild" commandline="SharpFlame.sln">
            <arg value="/p:Configuration=Release" />
            <arg value="/p:DefineConstants=Mono" />
        </exec>
    
        <property name="il.input.dir" value="SharpFlame.Gui.Linux/bin/Release" />
        <property name="il.input.exe" value="SharpFlame.Gui.Linux.exe"/>
        <property name="il.output.dir" value="${build.dir}"/>
        <call target="il-repack" />
    
    </target>

    <target name="build-osx" if="${osx}" description="Main Build Script for OSX">
        <call target="set-dev-env"/>

    </target>

    <target name="package">
        <copy todir="${build.dir}">
            <fileset basedir="Data">
                <include name="tilesets/**"/>
                <include name="3.1_b4-objects/**"/>
            </fileset>
        </copy>./n
        <property name="artifact.name" value="${path::get-file-name(build.dir)}"/>
        <zip zipfile="${path::combine(build.base, artifact.name + '.zip' )}">
            <fileset basedir="${build.dir}">
                <include name="**" />
            </fileset>
        </zip>
    </target>


    <target name="set-dev-env" description="Sets the Mac project development enviornment so it can be opened by MonoDevelop/VS/XamarionStudio.">
        <xmlpoke if="${linux or win}" xpath="/def:Project/def:PropertyGroup[1]/def:ProjectTypeGuids" value="{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}" file="SharpFlame.Gui.Mac/SharpFlame.Gui.Mac.csproj">
            <namespaces>
                <namespace prefix="def" uri="http://schemas.microsoft.com/developer/msbuild/2003"/>
            </namespaces>
        </xmlpoke>
        <xmlpoke if="${osx}" xpath="/def:Project/def:PropertyGroup[1]/def:ProjectTypeGuids" value="{948B3504-5B70-4649-8FE4-BDE1FB46EC69};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}" file="SharpFlame.Gui.Mac/SharpFlame.Gui.Mac.csproj">
            <namespaces>
                <namespace prefix="def" uri="http://schemas.microsoft.com/developer/msbuild/2003"/>
            </namespaces>
        </xmlpoke>
    </target>
    

    <!-- MISC -->
    <target name="test" description="test">
        
    </target>
    

     <!-- PRIVATE BUILD TARGETS -->
     <!-- PRIVATE BUILD TARGETS -->

    <target name="gen-asminfo">
        <asminfo output="${path::combine('SharpFlame.Core', 'GlobalAssemblyInfo.cs')}" language="CSharp">
            <imports>
                <import namespace="System" />
                <import namespace="System.Reflection" />
                <import namespace="System.Runtime.InteropServices" />
            </imports>
            <attributes>
                <attribute type="AssemblyVersionAttribute" value="${build.label}" />
                <attribute type="AssemblyFileVersionAttribute" value="${build.label}" />
                <attribute type="AssemblyProductAttribute" value="SharpFlame"/>
                <attribute type="AssemblyCopyrightAttribute" value="Copyright (c) ${datetime::get-year(datetime::now())}" />
                <attribute type="AssemblyDescriptionAttribute" value="SharpFlame: A modern Warzone 21000 map editor based on the original Warzone 2100 FlaME map editor." />
                <attribute type="AssemblyTrademarkAttribute" value="MIT License"/>
            </attributes>
        </asminfo>
    </target>

    <target name="il-repack">
        <!--tools\ILRepack.exe /target:winexe /targetplatform:v4 /wildcards /out:C:\Code\Projects\Public\SharpFlame\source\SharpFlame.Gui.Windows\bin\Release\REPACK\SharpFlame.exe SharpFlame.Gui.Windows\bin\Release\*.exe SharpFlame.Gui.Windows\bin\Release\*.dll-->
        <mkdir dir="${il.output.dir}" />
        <exec workingdir="${il.input.dir}" program="tools\ILRepack.exe" verbose="true" if="${win}">
            <arg value="/target:winexe" />
            <arg value="/targetplatform:v4" />
            <arg value="/wildcards" />
            <arg line="/out:${path::combine(il.output.dir,'SharpFlame.exe')}"/>
            <arg line="${il.input.exe}" />
            <arg line="*.dll" />
        </exec>
        <exec workingdir="${il.input.dir}" program="mono" verbose="true" if="${linux or osx}">
            <arg value="../../../tools/ILRepack.exe" />
            <arg value="/target:winexe" />
            <arg value="/targetplatform:v4" />
            <arg value="/lib:../../../packages/other/GtkSharp/2.12/lib/gtk-sharp-2.0" />
            <arg value="/lib:../../../packages/other/GtkSharp/2.12/lib/Mono.Cairo" />
            <arg value="/wildcards" />
            <arg line="/out:${path::combine(il.output.dir,'SharpFlame.exe')}"/>
            <arg line="${il.input.exe}" />
            <arg line="*.dll" />
        </exec>

    </target>

     <script language="C#">
         <references>
             <include name="System.dll" if="${win}"/>
             <include name="System.Core.dll" if="${win}"/>
         </references>
         <imports>
             <import namespace="System.Text.RegularExpressions"/>
             <import namespace="System.Linq"/>
         </imports>
          <code><![CDATA[
          
    [TaskName("filepoke")]
    public class FilePoke : Task {
      private string _file;
      private string _target;
      private string _value;
      [TaskAttribute("file", Required=true)]
      public string TargetFile {
          get { return _file; }
          set { _file = value; }
      }
      [TaskAttribute("target", Required=true)]
      public string Target {
          get { return _target; }
          set { _target = value; }
      }
      [TaskAttribute("value", Required=true)]
      public string Value {
          get { return _value; }
          set { _value = value; }
      }
      protected override void ExecuteTask() {
        string path = _file;
        StringBuilder filecontents = new StringBuilder();
        using (StreamReader sr = File.OpenText(path)) {
          string s = "";
           while ((s = sr.ReadLine()) != null) {
              filecontents.Append(Regex.Replace( s, _target, _value ) + "\n");
          }
      }
      using (StreamWriter sw = new StreamWriter(path)) {
        sw.Write(filecontents.ToString());
      }
      }
    }
        
    [FunctionSet("directory", "Directory")]
    public class CustomDirectoryFunctions : FunctionSetBase {
        public CustomDirectoryFunctions(Project project, PropertyDictionary properties) : base(project, properties) {
        }
        
        [Function("is-empty")]
        public static bool IsEmpty(string path) {
            return !Directory.EnumerateFileSystemEntries(path).Any();
        }
    }
    
    ]]></code>
     </script>
    
    
    
    <!-- Continuous Integration -->
    <target name="ci-build" description="cibuild">
        <call target ="ci-build-projects"/>
        <call target ="ci-package"/>
    </target>

    <target name="ci-build-projects">
        <call target="build-win" if ="${win}"/>
        <call target="build-linux" if ="${linux}"/>
        <call target="build-osx" if ="${osx}"/>
    </target>
    <target name ="ci-package">
        <call target="package"/>
    </target>

    <target name ="clean-all">
        <fail if ="${not property::exists('dryrun')}" message="'/D:dryrun=true|false' property must be specified"/>
        
        <foreach item="Folder" property="dir">
            <in>
                <items>
                    <include name ="_COMPILE_OUTPUT" />
                    <include name ="**/bin/**" />
                    <include name ="**/obj/**" />

                    <exclude name ="tools/**"/>
                    <exclude name ="packages/**"/>
                </items>
            </in>
            <do>
                <delete dir ="${dir}" if="${not dryrun}" />
                <echo message ="${dir}" if="${dryrun}"/>
            </do>
        </foreach>
        <foreach item="File" property="file">
            <in>
                <items>
                </items>
            </in>
            <do>
                <delete file="${file}" if="${not dryrun}" />
                <echo message ="${file}" if="${dryrun}"/>
            </do>
        </foreach>
    </target>

</project>

